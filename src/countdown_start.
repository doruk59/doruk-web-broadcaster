import tkinter as tk
from tkinter import ttk
import time
import subprocess
import os
from PIL import Image, ImageTk
import vlc
import threading
from playlist_manager import PlaylistManager

class CountdownApp:
    def __init__(self, root):
        self.root = root
        self.root.attributes('-fullscreen', True)
        self.root.title("Doruk Web Broadcasting")
        
        # Playlist Manager'ı başlat
        self.playlist_manager = None
        
        # Ana frame
        self.main_frame = ttk.Frame(root)
        self.main_frame.pack(fill='both', expand=True)
        
        # Load background image
        bg_path = "/media/doruk/KINGSTON/background.png"
        if os.path.exists(bg_path):
            bg_image = Image.open(bg_path)
            bg_image = bg_image.resize((root.winfo_screenwidth(), root.winfo_screenheight()))
            self.bg_photo = ImageTk.PhotoImage(bg_image)
            bg_label = tk.Label(self.main_frame, image=self.bg_photo)
            bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        
        # Create countdown label
        self.countdown_label = tk.Label(
            self.main_frame,
            text="120",
            font=("Arial", 72, "bold"),
            fg="white",
            bg="black"
        )
        self.countdown_label.place(relx=0.5, rely=0.4, anchor="center")
        
        # Button frame
        button_frame = ttk.Frame(self.main_frame)
        button_frame.place(relx=0.5, rely=0.8, anchor="center")
        
        # Create buttons
        self.start_button = ttk.Button(
            button_frame,
            text="Yayına Hemen Gir",
            command=self.start_stream,
            style="Green.TButton"
        )
        self.start_button.pack(side='left', padx=10)
        
        self.playlist_button = ttk.Button(
            button_frame,
            text="Playlist Yöneticisi",
            command=self.open_playlist_manager,
            style="Blue.TButton"
        )
        self.playlist_button.pack(side='left', padx=10)
        
        self.stop_button = ttk.Button(
            button_frame,
            text="Yayını Durdur",
            command=self.stop_stream,
            style="Red.TButton"
        )
        self.stop_button.pack(side='left', padx=10)
        
        # Configure button styles
        style = ttk.Style()
        style.configure("Green.TButton", background="green", foreground="white")
        style.configure("Red.TButton", background="red", foreground="white")
        style.configure("Blue.TButton", background="blue", foreground="white")
        
        # Initialize VLC player for background music
        self.player = vlc.MediaPlayer("/media/doruk/KINGSTON/music.mp3")
        self.player.play()
        
        # Start countdown
        self.countdown_thread = threading.Thread(target=self.countdown)
        self.countdown_thread.daemon = True
        self.countdown_thread.start()
    
    def open_playlist_manager(self):
        if self.playlist_manager is None:
            playlist_window = tk.Toplevel(self.root)
            self.playlist_manager = PlaylistManager(playlist_window)
            playlist_window.protocol("WM_DELETE_WINDOW", 
                                  lambda: self.close_playlist_manager(playlist_window))
    
    def close_playlist_manager(self, window):
        self.playlist_manager = None
        window.destroy()
    
    def countdown(self):
        for i in range(120, -1, -1):
            if not hasattr(self, 'root') or not self.root.winfo_exists():
                break
            self.countdown_label.config(text=str(i))
            time.sleep(1)
        
        if hasattr(self, 'root') and self.root.winfo_exists():
            self.start_stream()
    
    def start_stream(self):
        # Kill any existing ffmpeg processes
        subprocess.run(["pkill", "-f", "ffmpeg"])
        
        # Get current playlist if exists
        current_playlist = None
        if self.playlist_manager:
            current_playlist = self.playlist_manager.get_current_playlist()
        
        if current_playlist:
            # Start stream with playlist
            subprocess.Popen(["./stream.sh", "--playlist", current_playlist])
        else:
            # Start stream with default settings
            subprocess.Popen(["./stream.sh"])
        
        # Start the web panel
        subprocess.Popen(["python3", "app.py"])
        
        # Close the countdown window
        self.root.destroy()
    
    def stop_stream(self):
        # Kill ffmpeg process
        subprocess.run(["pkill", "-f", "ffmpeg"])
        # Close the countdown window
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = CountdownApp(root)
    root.mainloop()
